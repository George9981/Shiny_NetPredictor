dim(small1976)
betweenness_w(small1976)
1200 * 400
2000*400
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
devtools::install_github('rstudio/shiny')
remove.packages("shiny", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("shiny", lib.loc="~/Library/R/3.2/library")
library(shiny)
devtools::install_github('rstudio/shiny')
library(shiny)
remove.packages("shiny", lib="~/Library/R/3.2/library")
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
100*(70/6)
100*(70/100)*6
(100*70/100)*6
(100*(70/100))*6
(100*(70/100))/6
(725*(70/100))/6
(30/100)*30
(600*(70/100))/6
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
85+65
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
#### LP&BRIM Algorithm
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
source('~/Drugbank/perm.R', echo=TRUE)
library(netpredictor)
library(doParallel)
S2=  as.matrix(gpcr_Gsim)
S1 =  as.matrix(gpcr_Csim)
A <- as.matrix(t(gpcr_ADJ))
l = ceiling(0.2 * sum(A))
res <- data.frame()
for ( i in 1:50){
message(sprintf("Computing for %d",i))
nbi1 <- net.perf(A,S1,S2,relinks=l,numT=2,Calgo="rwr")
res <- rbind(res,nbi1)
}
cl <- makeCluster(detectCores())
cl
doMC::registerDoMC(cl)
stopCluster(cl)
cl
library("netpredictor", lib.loc="~/Library/R/3.2/library")
remove.packages("netpredictor", lib="~/Library/R/3.2/library")
install.packages("~/github/netpredictor_1.0.tar.gz", repos = NULL, type = "source")
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
A <- enzyme_ADJ
dim(A)
sum(A)
A <- ic_ADJ
sum(A)
dim(A)
A <- gpcr_ADJ
dim(A)
head(colnames(A))
head(rownames(A))
A <- nr_ADJ
dim(A)
sum(A)
A <- ic_ADJ
sum(A)
dim(A)
head(colnames(A))
class(A)
l = ceiling(0.2 * sum(A))
l
sum(A)
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
FacVar1 = as.factor(rep(c("level1", "level2"), 25))
FacVar2 = as.factor(rep(c("levelA", "levelB", "levelC"), 17)[-51])
FacVar3 = as.factor(rep(c("levelI", "levelII", "levelIII", "levelIV"), 13)[-c(51:52)])
### 4 Numeric Vars
set.seed(123)
NumVar1 = round(rnorm(n = 50, mean = 1000, sd = 50), digits = 2)  ### Normal distribution
set.seed(123)
NumVar2 = round(runif(n = 50, min = 500, max = 1500), digits = 2)  ### Uniform distribution
set.seed(123)
NumVar3 = round(rexp(n = 50, rate = 0.001))  ### Exponential distribution
NumVar4 = 2001:2050
simData = data.frame(FacVar1, FacVar2, FacVar3, NumVar1, NumVar2, NumVar3, NumVar4)
library(rCharts)
library(reshape2)
dense = density(simData$NumVar1)
dense = data.frame(dense$x, dense$y)
n1 = nPlot(x = "dense.x", y = "dense.y", data = dense, type = "lineChart")
n1
head(simData)
install.packages("dygraphs")
data(economics, package = 'ggplot2')
head()
head(economics)
p6 <- nPlot(uempmed ~ date, data = economics, type = 'lineChart')
p6
library(rCharts)
p6 <- nPlot(uempmed ~ date, data = economics, type = 'lineChart')
p6
p6 <- nPlot(y = "uempmed" x="date", data = economics, type = 'lineChart')
p6 <- nPlot(y = "uempmed",x="date", data = economics, type = 'lineChart')
p6
p6 <- nPlot(y = "uempmed",x="date", data = economics, type = 'lineChart')
p6$xAxis(
tickFormat =   "#!
function(d) {return d3.time.format('%Y-%m-%d')(new Date(d*1000*3600*24));}
!#",
rotateLabels = -90
)
p6
shiny::runApp('Downloads/B04830_Codebundle/4830_05_Codes/finalDashboard_V4')
install.packages("rgdal")
shiny::runApp('Downloads/B04830_Codebundle/4830_06_Codes/4830_06_Codes')
install.packages("d3heatmap")
shiny::runApp('Downloads/B04830_Codebundle/4830_06_Codes/4830_06_Codes')
install.packages("threejs")
shiny::runApp('Downloads/B04830_Codebundle/4830_06_Codes/4830_06_Codes')
install.packages("rgdal")
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/Library/Frameworks/PROJ.framework/Headers', '--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'))
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/Library/Frameworks/PROJ.framework/Headers', '--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'))
shiny::runApp('github/shiny-apps-master/highcharter')
install.packages("highcharter")
install.packages("highcharter")
library(devtools)
install_github("jbkunst/highcharter")
install.packages("highcharter")
library(devtools)
install_github("jbkunst/highcharter")
install_github("cran/highcharter")
library(rHighcharts)
install.packages("viridisLite")
install.packages("quantmode")
install.packages("quantmod")
install.packages("treemap")
install.packages("forecast")
install.packages("highcharter")
install_github("cran/highcharter")
install_github("jbkunst/highcharter")
install.packages("highcharter")
install_github("jbkunst/highcharter")
library(devtools)
library(devtools)
install_github("jbkunst/highcharter")
curl -i https://api.github.com/ramnathv/rMaps
install.packages(c("purrr", "viridisLite"))
install_github("jbkunst/highcharter")
install.packages("purr")
install.packages("purrr")
install_github("jbkunst/highcharter")
shiny::runApp('github/CTgov-master')
install.packages("~/Downloads/highcharter_0.3.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/highcharter_0.3.0.tgz", repos = NULL, type = .Platform$pkgType)
library(highcharter)
install.packages("dcr")
devtools:::install_github("massmutual/dcr")
library(dcr)
library(dcr)
# create chart object
mydcr <- dcr(mtcars)
# pie chart counting by number of cylinders
chart_cyl <- dcrchart(type = "pieChart", id = "chart1", dimension = "cyl",
reduce = reduceCount(), width = 250, height = 250)
# line chart calculation average horse power by number of forward gears
chart_gear <- dcrchart(type = "lineChart", id = "chart2", dimension = "gear",
reduce = reduceMean("hp"), width = 400, height = 250)
# row chart couting by number of carburetors
chart_carb <- dcrchart(type = "rowChart", id = "chart3", dimension = "carb",
reduce = reduceCount(), width = 300, height = 250)
# view the charts and interatively slice and dice to explore the data
mydcr + chart_cyl + chart_gear + chart_carb
mydcr <- dcr(mtcars)
# pie chart counting by number of cylinders
chart_cyl <- dcrchart(type = "pieChart", id = "chart1", dimension = "cyl",
reduce = reduceCount(), width = 250, height = 250)
# line chart calculation average horse power by number of forward gears
chart_gear <- dcrchart(type = "lineChart", id = "chart2", dimension = "gear",
reduce = reduceMean("hp"), width = 400, height = 250)
# row chart couting by number of carburetors
chart_carb <- dcrchart(type = "barChart", id = "chart3", dimension = "carb",
reduce = reduceCount(), width = 300, height = 250)
# view the charts and interatively slice and dice to explore the data
mydcr + chart_cyl + chart_gear + chart_carb
runUrl("http://www.fabioveronesi.net/ShinyApp/InterfacingRGoogleMaps.zip")
getwd()
d <- read.csv("db_test.csv",header=TRUE)
head(d)
data.frame(director = c("Aaron Blaise,Bob Walker", "Akira Kurosawa",
"Alan J. Pakula", "Alan Parker", "Alejandro Amenabar", "Alejandro Gonzalez Inarritu",
"Alejandro Gonzalez Inarritu,Benicio Del Toro", "Alejandro González Iñárritu",
"Alex Proyas", "Alexander Hall", "Alfonso Cuaron", "Alfred Hitchcock",
"Anatole Litvak", "Andrew Adamson,Marilyn Fox", "Andrew Dominik",
"Andrew Stanton", "Andrew Stanton,Lee Unkrich", "Angelina Jolie,John Stevenson",
"Anne Fontaine", "Anthony Harvey"), AB = c('A', 'B', 'A', 'A', 'B', 'B', 'B', 'A', 'B', 'A', 'B', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'A'))
s <- strsplit(as.character(d$ATC), '|')
s
data.frame(director=unlist(s), AB=rep(v$DBID, sapply(s, FUN=length)))
data.frame(director=unlist(s), AB=rep(d$DBID, sapply(s, FUN=length)))
s <- strsplit((d$ATC), '|')
d
class(d)
s <- strsplit(d$ATC, '|')
d$ATC
library(splitstackshape)
install.packages("splitstackshape")
library(splitstackshape)
head(cSplit(d, "DBID", "|", direction = "long"))
head(cSplit(d, "ATC", "|", direction = "long"))
getwd()
d <- read.csv("db_test.csv",header=TRUE)
atc_data <- cSplit(d, "ATC", "|", direction = "long"))
atc_data <- cSplit(d, "ATC", "|", direction = "long")
library(splitstackshape)
atc_data <- cSplit(d, "ATC", "|", direction = "long")
atc_data
atc_data$firstLevel <- substring(atc_data$ATC, 1, 1)
atc_data
library(devtools)
install_github("clickme", "nachocab")
library(clickme)
demo_ractive("par_coords")
list_ractives()
clickme("points", rnorm(100))
shiny::runApp('Downloads/chemical_sketcher-master')
shiny::runApp('Downloads/chemical_sketcher-master')
library(shiny)
library(shiny)
library(shinyDND)
# Define UI for application that draws a histogram
ui <- shinyUI(
mainPanel(
h2("DragUI"),
dragUI("div6","bar"),
dragUI("div5","foo", style = "background-color:red", class = "dragelement"),
dragUI("div4",tags$a("a",href = "foo")),
h2("Drop UI"),
dropUI("div3",row_n = 4, col_n = 3),
h2("Drop UI Reactive"),
dropUI("div2"),
h2("DragSetUI"),
dragSetUI("div1", textval = list("foo",tags$a("a",href = "bar"),"baz"))
)
)
# server with reactive for observing reactive drop event
server = shinyServer(function(input, output,session) {
observeEvent(input$div2,{
output$foo = renderText(
paste("The dropUI element currently contains:", input$div2))
})
})
# Run the application
shinyApp(ui = ui, server = server)
69.9+57.9
127.8/2
(83.7+78.3)/2
devtools::install_github("52North/sensorweb4R")
sensorweby::runExample("basic")
devtools::install_github("52North/sensorweby")
sensorweby::runExample("basic")
sensorweby::runExample("basic")
devtools::install_github("kevinushey/sourcetools")
install.packages("testthat")
library("testthat", lib.loc="~/Library/R/3.2/library")
remove.packages("testthat", lib="~/Library/R/3.2/library")
install.packages("~/Downloads/testthat-1.0.2.tar.gz", repos = NULL, type = "source")
version
install.packages('devtools') #assuming it is not already installed
install.packages("devtools")
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'bunty@5889545')
updateR()
updateR(admin_password = 'bunty@5889545')
updateR(admin_password = 'bunty5889545')
updateR(admin_password = 'bunty5889545')
install.packages('devtools') #assuming it is not already installed
install.packages("rredis")
require(shiny)
install.packages("shiny")
install.packages(c("foreign", "Matrix"))
install.packages("doMC")
install_github('rCharts', 'ramnathv')
install_github('ramnath/rCharts')
library(devtools)
install_github('ramnath/rCharts')
install_github('ramnathv/rCharts')
install.packages("tm")
install.packages("tm")
install.packages("LDAvis")
install.packages("foreach")
install.packages("topicmodels")
install.packages("irlba")
install_github("LDAtools", "kshirley");
install.packages("mallet")
install.packages("xts")
install.packages("httr")
install.packages("lubridate")
shiny::runApp('Documents/akde-pubmed-master/doc_viz')
install.packages("ldatools")
runApp('Documents/akde-pubmed-master/doc_viz')
runApp('Documents/akde-pubmed-master/doc_viz')
install.packages("rJava")
runApp('Documents/akde-pubmed-master/doc_viz')
library(mallet)
install.packages('rJava', type='source')
install.packages('rJava', type='source')
install.packages('rJava', type='source')
library(mallet)
install.packages("rJava", type = "mac.binary")
install.packages("rJava", type = "mac.binary")
install.packages('rJava', type='source')
remove.packages(rJava)
install.packages("rJava", dependencies = TRUE, type = "source")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
install.packages("rJava", dependencies = TRUE, type = "source")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
install.packages("rJava", dependencies = TRUE, type = "source")
install.packages("rJava", dependencies = TRUE, type = "source")
shiny::runApp('Documents/shiny_password-master')
runApp('Documents/shiny-user-auth-master')
install.packages("RSQLite")
runApp('Documents/shiny-user-auth-master')
install.packages("sodium")
runApp('Documents/shiny-user-auth-master')
install.packages("dtplyr")
runApp('Documents/shiny-user-auth-master')
runApp('Documents/shiny-user-auth-master')
install.packages("rzmq")
install.packages("log4r")
install.packages("digest")
install.packages("rredis")
install.packages("chemmodlab")
library(chemmodlab)
shiny::runApp(appDir = "examples/minimalshinyapp/")
chemdoodle_viewer("C1CCCCC1", width = 100, height = 100)
install.packages("~/chemdoodle-master.zip", repos = NULL, type = "win.binary")
library(data.table)
set.seed(123)
d1a <- fread("2005.csv")
shiny::runApp('Downloads/drug_browser-master/query_gene_app')
devtools::install_github("Appsilon/shiny.semantic")
runApp('Downloads/drug_browser-master/query_gene_app')
install.packages("readr")
runApp('Downloads/drug_browser-master/query_gene_app')
runApp('Downloads/drug_browser-master/query_gene_app')
runApp('Downloads/drug_browser-master/app')
runApp('Downloads/drug_browser-master/custom_library_app')
runApp('Downloads/drug_browser-master/query_drug_app')
install.packages("ggvis")
runApp('Downloads/drug_browser-master/query_drug_app')
devtools::install_github("jcheng5/d3scatter")
runApp('Downloads/drug_browser-master/query_drug_app')
library(shiny.semantic)
devtools::install_github("Appsilon/shiny.semantic", ref = "0.1.0")
devtools::install_github("Appsilon/shiny.semantic")
devtools::install_github("Appsilon/shiny.semantic",force=TRUE)
shiny::runGitHub('Sage-Bionetworks/WallOfTargets')
install_github('Sage-Bionetworks/rSynapseClient', ref='develop')
install_github('Sage-Bionetworks/rSynapseClient', ref='develop')
library(devtools)
install_github('Sage-Bionetworks/rSynapseClient', ref='develop')
shiny::runGitHub('Sage-Bionetworks/WallOfTargets')
install.packages("rstackdeque",repos='http://cran.us.r-project.org')
shiny::runGitHub('interactive-graph-viewer','Sotera',port = 8787)
install.packages("mmtsne")
data("iris")
library(mmtsne)
prob_matrix <- p2sp(x2p(as.matrix(iris[,1:4])))
model <- mmtsneP(prob_matrix, no_maps=2, max_iter=100)
par(mfrow=c(1,2))
plot(model$Y[,,1], col=iris$Species, cex=model$proportions[,1] + 0.2)
plot(model$Y[,,2], col=iris$Species, cex=model$proportions[,2] + 0.2)
par(mfrow=c(1,1))
model
par(mfrow=c(1,2))
plot(model$Y[,,1], col=iris$Species, cex=model$weights[,1] + 0.2)
plot(model$Y[,,2], col=iris$Species, cex=model$weights[,2] + 0.2)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(model$Y[,,1], col=iris$Species, cex=model$proportions[,1] + 0.2)
plot(model$Y[,,2], col=iris$Species, cex=model$proportions[,2] + 0.2)
par(mfrow=c(1,1))
dim(prob_matrix)
head(model$Y[,,1])
scatter <- ggplot(data=model$Y[,,1], aes(x = [,1], y = [,2]))
p <- data.frame(model$Y[,,1])
head(p)
scatter <- ggplot(data=p, aes(x = X1, y = X2))
scatter + geom_point(aes(color=iris$Species, shape=iris$Species),cex=model$proportions[,1]+0.2) +
xlab("dim1") +  ylab("dim2") +
ggtitle("map1")
dim(p)
dim(model$proportions[,1])
model$proportions[,1]
length(model$proportions[,1])
scatter + geom_point(aes(color=iris$Species, shape=iris$Species)) +
xlab("dim1") +  ylab("dim2") +
ggtitle("map1")
p <- data.frame(model$Y[,,2])
scatter <- ggplot(data=p, aes(x = X1, y = X2))
scatter + geom_point(aes(color=iris$Species, shape=iris$Species)) +
xlab("dim1") +  ylab("dim2") +
ggtitle("map2")
shiny::runApp('github/Shiny_NetPredictor')
runApp('github/Shiny_NetPredictor')
runApp('github/Shiny_NetPredictor')
runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
runApp('github/Shiny_NetPredictor')
runApp('github/Shiny_NetPredictor')
runApp('github/Shiny_NetPredictor')
runApp('github/Shiny_NetPredictor')
runApp('github/Shiny_NetPredictor')
runApp('github/Shiny_NetPredictor')
runApp('github/Shiny_NetPredictor')
runApp('github/Shiny_NetPredictor')
mod2 <- readRDS("genes.rds")
setwd("~/github/Shiny_NetPredictor")
mod2 <- readRDS("genes.rds")
head(mod2)
runApp()
runApp()
runApp()
runApp()
runApp()
data(diff_exp_example1)
library(STRINGdb)
data(diff_exp_example1)
head(diff_exp_example1)
example1_mapped <- string_db$map( diff_exp_example1, "gene", removeUnmappedRows = TRUE )
string_db <- STRINGdb$new( version="10", species=9606,score_threshold=0, input_directory="" )
example1_mapped <- string_db$map( diff_exp_example1, "gene", removeUnmappedRows = TRUE )
example1_mapped
head(example1_mapped)
hits <- example1_mapped$STRING_id[1:200]
string_db$plot_network( hits )
runApp()
runApp()
runApp()
devtools::install_github('kdaily/shinyPathway')
devtools::install_github("kdaily/shinyPathway")
source("https://bioconductor.org/biocLite.R")
biocLite("paxtoolsr")
source("https://bioconductor.org/biocLite.R")
biocLite("paxtoolsr")
devtools::install_github("kdaily/shinyPathway")
shinyPathway::runExample()
library(shinyPathway)
runExample()
