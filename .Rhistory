plotOutput("genericPlot")
),
tabPanel("Tab #2",
checkboxInput("showOptions", "Show Options"),
uiOutput("ui_multiview_customize"),
plotOutput("multiview_plot")
)
)
),
server =
function(input, output, session) {
output$genericPlot <- renderPlot(plot(rnorm(1000)))
output$multiview_plot <- renderPlot(plot(runif(1000)))
output$ui_multiview_customize <- renderUI({
if(input$showOptions) {
bsCollapse(
bsCollapsePanel(title = "View Options",
checkboxInput("multiview_checkbox", label = "Include warmup", value = FALSE),
hr(),
tipify(downloadButton("download_multiview", "Save as ggplot2 objects"),
title = "Save ggplot2 object in .RData file.", placement="right")
)
)
}
})
}
)
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
data(Enzyme)
A <- t(enzyme_ADJ)
S1 = as.matrix(enzyme_Csim)
S2 = as.matrix(enzyme_Gsim)
P1 <- nbiNet(A,alpha=0.5, lamda=0.5,  s1=S1, s2=S2,format = "matrix")
perm = list()
set.seed(12345)
for ( i in 1:10){
A <- t(enzyme_ADJ)
A <- A[sample(nrow(A)),sample(ncol(A))]
S1 = as.matrix(enzyme_Csim)
S2 = as.matrix(enzyme_Gsim)
S1 <- S1[sample(nrow(S1)),sample(ncol(S1))]
S2 <- S2[sample(nrow(S2)),sample(ncol(S2))]
R1 <- nbiNet(A,alpha=0.5, lamda=0.5,  s1=S1, s2=S2,format = "matrix")
perm[[i]] <- R1
}
mean_mat <- apply(simplify2array(perm), 1:2, mean)
sd_mat  <-  apply(simplify2array(perm), 1:2, sd)
Z <- (P1 - mean_mat)/sd_mat
sigNetwork <- 2*(pnorm(-abs(Z)))
sigNetwork[1:3,1:5]
sigNetwork[1:5,1:5]
dim(mean_mat)
mean_mat[1:2,1:5]
P1[1:5,1:5]
Z[1:5,1:5]
sd_mat[1:5,1:5]
P1[1:5,1:5]
(0-0)/0
mean_mat <- apply(simplify2array(perm), 1:2, mean)
sd_mat  <-  apply(simplify2array(perm), 1:2, sd)
Z <- (P1 - mean_mat)/sd_mat
Z[is.nan(Z)] = 0
sigNetwork <- 2*(pnorm(-abs(Z)))
sigNetwork[1:10,1:10]
d <- melt(sigNetwork)
head(d)
dd <- melt(sigNetwork)
d <- dd[ order(-dd[,3]), ]
head(d)
dd <- melt(sigNetwork)
d <- dd[ order(dd[,3]), ]
head(d)
head(d,10)
install_github("pauca/rrdkit/rrdkit")
library(devtools)
install_github("pauca/rrdkit/rrdkit")
oo <- melt(A)
head(oo)
PD <- melt(sigNetwork)
P <- PD[ order(PD[,3]), ]
OD <- OD[OD$value == 1,]
OD <- melt(A)
OD <- OD[OD$value == 1,]
dim(OD)
tail(P)
tail(P,30)
dim(P)
P[P$value > 0.05] <- 10
PD <- melt(sigNetwork)
P <- PD[ order(PD[,3]), ]
P[P$value > 0.05] <- 10
P[P$value > 0.05,] <- 10
head(P)
tail(P)
sigNetwork[sigNetwork > 0.05] <- 10
PD <- melt(sigNetwork)
P <- PD[ order(PD[,3]), ]
tail(P)
dim(P)
FPD <- P[P$value!=10,]
dim(FPD)
sigNetwork <- 2*(pnorm(-abs(Z)))
sigNetwork[sigNetwork >= 0.05] <- 10
PD <- melt(sigNetwork)
P <- PD[ order(PD[,3]), ]
FPD <- P[P$value!=10,]
dim(FPD)
tail(FPD)
0.03 < 0.05
dim(OD)
sigNetwork <- 2*(pnorm(-abs(Z)))
sigNetwork[sigNetwork <  0.05] <- 1
sigNetwork[sigNetwork != 1] <- 0
sum(sigNetwork) ## Total number of interactions after computation.
sigNetwork <- 2*(pnorm(-abs(Z)))
PO <- rbind(OD,FPD)
dim(PO)
u <- unique(PO[duplicated(PO),])
dim(u)
head(PO)
u <- PO[duplicated(PO),]
dim(u)
t <- merge(FPD, OD, by.x='Var1', by.y='Var2')
head(t)
head(OD)
dim(FPD)
class(FPD)
class(OD)
head(FPD)
OD <- OD[,1:2]
head(OD)
t <- merge(OD,FPD by.x='Var1', by.y='Var2')
t <- merge(OD,FPD,by.x='Var1', by.y='Var2')
head(t)
colnames(OD) <= c("Drug","target")
t <- merge(OD,FPD,by.x='Var1', by.y='Var2')
head(OD)
colnames(OD) <= c("Drug","target")
colnames(OD) <- c("Drug","target")
head(OD)
t <- merge(OD,FPD,by.x='Var1', by.y='Var2')
t <- merge(OD,FPD,by.x='target', by.y='Var1')
head(t)
head(OD)
t <- merge(OD,FPD,by.x='Drug', by.y='Var2')
head(t)
t <- merge(OD,FPD,by.x='Drug', by.y='Var1')
head(t)
dim(t)
tail(t)
FP <- FP[,1:2]
FP <- FPD[,1:2]
head(FP)
OD <- melt(A)
OD <- OD[OD$value == 1,]
OD <- OD[,1:2]
head(OD)
fun.12 <- function(x.1,x.2,...){
x.1p <- do.call("paste", x.1)
x.2p <- do.call("paste", x.2)
x.1[! x.1p %in% x.2p, ]
}
m <- fun.12(FP,OD)
dim(m)
new <- merge(FPD,m)
dim(new)
head(new)
dim(OD)
dim(FP)
4552+1515
warnings()
tail(new)
old <- merge(m,FPD)
dim(old)
head(new)
old <- merge(OD,FPD)
dim(old)
head(old)
new$outcome <- "Predicted Interactions"
old$outcome <- "True Interactions"
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
install.packages("DT")
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
detach("package:data.table", unload=TRUE)
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
74.41-7.99
7.99+9.99
71.41-17.98
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
library(ShinySRAdb)
library(devtools)
install_github('oliviazz/SRAdb-app')
source("https://bioconductor.org/biocLite.R")
biocLite("SRAdb")
source("https://bioconductor.org/biocLite.R")
biocLite("SRAdb")
library(devtools)
install_github('oliviazz/SRAdb-app')
library(ShinySRAdb)
ShinySRAdb()
library(bipartite)
sampledata <- rbind(
c(1,2,1),
c(1,3,5),
c(2,1,1),
c(2,4,6),
c(3,1,5),
c(3,4,10),
c(4,2,6),
c(4,3,10))
sampledata
betweenness_w(sampledata)
data(small1976)
dim(small1976)
betweenness_w(small1976)
1200 * 400
2000*400
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
devtools::install_github('rstudio/shiny')
remove.packages("shiny", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("shiny", lib.loc="~/Library/R/3.2/library")
library(shiny)
devtools::install_github('rstudio/shiny')
library(shiny)
remove.packages("shiny", lib="~/Library/R/3.2/library")
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
100*(70/6)
100*(70/100)*6
(100*70/100)*6
(100*(70/100))*6
(100*(70/100))/6
(725*(70/100))/6
(30/100)*30
(600*(70/100))/6
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
85+65
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
#### LP&BRIM Algorithm
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
source('~/Drugbank/perm.R', echo=TRUE)
library(netpredictor)
library(doParallel)
S2=  as.matrix(gpcr_Gsim)
S1 =  as.matrix(gpcr_Csim)
A <- as.matrix(t(gpcr_ADJ))
l = ceiling(0.2 * sum(A))
res <- data.frame()
for ( i in 1:50){
message(sprintf("Computing for %d",i))
nbi1 <- net.perf(A,S1,S2,relinks=l,numT=2,Calgo="rwr")
res <- rbind(res,nbi1)
}
cl <- makeCluster(detectCores())
cl
doMC::registerDoMC(cl)
stopCluster(cl)
cl
library("netpredictor", lib.loc="~/Library/R/3.2/library")
remove.packages("netpredictor", lib="~/Library/R/3.2/library")
install.packages("~/github/netpredictor_1.0.tar.gz", repos = NULL, type = "source")
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
A <- enzyme_ADJ
dim(A)
sum(A)
A <- ic_ADJ
sum(A)
dim(A)
A <- gpcr_ADJ
dim(A)
head(colnames(A))
head(rownames(A))
A <- nr_ADJ
dim(A)
sum(A)
A <- ic_ADJ
sum(A)
dim(A)
head(colnames(A))
class(A)
l = ceiling(0.2 * sum(A))
l
sum(A)
setwd("~/github/Shiny_NetPredictor")
shiny::runApp()
23056*10
30.09-9.05
30.09-9.10
29.36+21.00
library(randomForest)
log2(2/12)
log2(2/12)
log(2/12)
a = log(2/12)
a = log2(2/12)
b = log2(4/12)
c = log2(6/12)
1-(a+b+c)
c = log2(1)
c
c = log2(1/3)
c
d = log2(4/6)
d
c+d
log2(0.5)
-log2(0.5)
0.5*1+0.5*1
getMidPoints <- function(vector) {
ret <- sort(unique(vector))
return(0.5 * (ret[-length(ret)] + ret[-1]))
}
getSetosa <- function(data) {
return(subset(data, Species == "setosa"))
}
getVersicolor <- function(data) {
return(subset(data, Species == "versicolor"))
}
gini <- function(data, splitter) {
N_all <- nrow(data)
N_true <- nrow(splitter(data))
N_false <- N_all - N_true
P <- c(N_true / N_all, N_false / N_all)
return(sum(P * (1-P)))
}
getLeftNodes <- function(data, label, threshold) {
return(data[data[[label]] < threshold, ])
}
getRightNodes <- function(data, label, threshold) {
return(data[data[[label]] > threshold, ])
}
splitNodeForBestGini <- function(nodes, inputLabel, midPoints) {
minimumGini <- 1.0
for(midPoint in midPoints) {
leftNodes <- getLeftNodes(nodes, inputLabel, midPoint)
rightNodes <- getRightNodes(nodes, inputLabel, midPoint)
gini <- gini(leftNodes, getVersicolor) + gini(rightNodes, getVersicolor)
if (gini < minimumGini) {
minimumGini <- gini
bestPointwiseResult <- list(
gini = gini,
midPoint = midPoint,
leftNodes = leftNodes,
rightNodes = rightNodes,
inputLabel = inputLabel
)
}
}
return(bestPointwiseResult)
}
split <- function(nodes, inputLabels) {
print(nodes)
bestInputLabelWiseGini <- 1.0
bestResult <- NULL
for(inputLabel in inputLabels) {
midPoints <- getMidPoints(nodes[[inputLabel]])
if (length(midPoints) == 0) {
next
}
bestLabelwiseResult <- splitNodeForBestGini(nodes, inputLabel, midPoints)
if (bestLabelwiseResult[["gini"]] < bestInputLabelWiseGini) {
bestInputLabelWiseGini <- bestLabelwiseResult[["gini"]]
bestResult <- bestLabelwiseResult
}
}
if (is.null(bestResult)) {
return(list(
left = NULL,
right = NULL,
nodes = nodes,
isClassTrue = nrow(getVersicolor(nodes)) / nrow(nodes) > 0.5
))
} else {
return(list(
left = split(bestResult[["leftNodes"]], inputLabels),
right = split(bestResult[["rightNodes"]], inputLabels),
threshold = bestResult[["midPoint"]],
inputLabel = bestResult[["inputLabel"]],
nodes = nodes
))
}
}
traverseTree <- function(tree, thresholds) {
if (!is.null(tree[["inputLabel"]])) {
newIndex = length(thresholds$inputLabel) + 1
thresholds$inputLabel[newIndex] = tree[["inputLabel"]]
thresholds$threshold[newIndex] = tree[["threshold"]]
thresholds <- traverseTree(tree[["left"]], thresholds)
thresholds <- traverseTree(tree[["right"]], thresholds)
}
return(thresholds)
}
classifyByTree <- function(tree, sample) {
inputLabel <- tree[["inputLabel"]]
threshold <- tree[["threshold"]]
if (is.null(inputLabel)) {
return(tree[["isClassTrue"]])
} else {
isLeft <- sample[[inputLabel]] < threshold
if (isLeft == TRUE) {
return(classifyByTree(tree[["left"]], sample))
} else {
return(classifyByTree(tree[["right"]], sample))
}
}
}
inputLabels <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")
tree = split(iris, inputLabels)
inferred <- apply(iris, 1, function(row) classifyByTree(tree, row))
actual <- iris[["Species"]] == "versicolor"
print(data.frame(inferred=inferred, actual=actual))
shiny::runApp()
setwd("~/github/Shiny_NetPredictor")
