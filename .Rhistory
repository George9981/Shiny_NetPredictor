gridsterItem(col = 1, row = 2, sizex = 1, sizey = 1,
p("Diet 1 is the worst, Diet 3 is the best.
Sunflower diet is the most efficient")
)
)
),
server= function(input, output) {
output$myChart <- renderChart({
ChickWeight$Time <- ChickWeight$Time + runif(length(ChickWeight$Time), 0, 1)
chickPlot <- hPlot(weight ~ Time, type="scatter", group = "Diet", data=ChickWeight,
title = "Chicken Weight over Time")
chickPlot$xAxis(title = list(text = "Time (Days)"))
chickPlot$yAxis(title = list(text = "Weight"))
chickPlot$chart(width = 390, height = 320)
chickPlot$addParams(dom = "myChart")
return(chickPlot)
})
output$myTable <- renderTable({
aggregate(weight ~ feed, data = chickwts, mean)
})
}
))
shiny::runApp('Downloads/shinyex2')
library(devtools)
devtools::install_github("rstudio/shiny")
shiny::runApp('Downloads/shinyex2')
library(shiny)
shiny::runApp('Downloads/shinyex2')
detach("package:shiny", unload=TRUE)
remove.packages("shiny", lib="~/Library/R/3.2/library")
shiny::runApp('Downloads/shinyex2')
devtools::install_github("rstudio/shiny")
library(shiny)
shiny::runApp('Downloads/shinyex2')
shiny::runApp('Downloads/shinyex2')
shiny::runApp('Downloads/shinyex2')
shiny::runApp('Downloads/shinyex2')
shiny::runApp('Downloads/shinyex2')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
c <- data.frame()
empty(c)
shiny::runApp('github/Shinyapps/netpredicter')
P = d()
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
library(rpubchem)
library(rpubchem)
library(rcdk)
library(rpubchem)
aids <- find.assay.id('dihydroorotate+dehydrogenase+and+Malaria')
data <- data.frame()
for (i in 2:20) {
assay<-get.assay(aids[i],quiet=TRUE)
assaydata<-assay[,c("PUBCHEM.CID","PUBCHEM.ACTIVITY.OUTCOME")]
data<-rbind(data,assaydata)
}
head(data)
Active <- data[data$PUBCHEM.ACTIVITY.OUTCOME=="Active",]
cmps <- get.cid(Active$PUBCHEM.CID)
head(cmps)
aids <- find.assay.id('dihydroorotate+dehydrogenase+and+Malaria')
library(rcdk)
library(rpubchem)
aids <- find.assay.id('dihydroorotate+dehydrogenase+and+Malaria')
data <- data.frame()
head(aids)
aids[1]
library(shiny)
library(shinyBS)
bsDemo()
library(shiny)
library(shinyBS)
app <- shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(HTML("This button will open Panel 1 using <code>updateCollapse</code>."),
actionButton("p1Button", "Push Me!"),
selectInput("styleSelect", "Select style for Panel 1",
c("default", "primary", "danger", "warning", "info", "success"))
),
mainPanel(
bsCollapse(id = "collapseExample", open = "Panel 2",
bsCollapsePanel("Panel 1", "This is a panel with just text ",
"and has the default style. You can change the style in ",
"the sidebar.", style = "info"),
bsCollapsePanel("Panel 2", "This panel has a generic plot. ",
"and a 'success' style.", plotOutput("genericPlot"), style = "success")
),
uiOutput("tooltip_test"),
actionButton("test2", "Test2"),
bsTooltip("test2", title = "Test2", placement="right"),
tipify(tags$button("Hello"), "Test without ID")
)
)
),
server =
function(input, output, session) {
output$genericPlot <- renderPlot(plot(rnorm(100)))
observeEvent(input$p1Button, ({
updateCollapse(session, "collapseExample", open = "Panel 1")
}))
observeEvent(input$styleSelect, ({
updateCollapse(session, "collapseExample", style = list("Panel 1" = input$styleSelect))
}))
output$tooltip_test <- renderUI({
tipify(actionButton("test", "Test"), title = "test", placement = "right")
})
}
)
runApp(app)
library(shiny)
library(shinyBS)
shinyApp(
ui =
fluidPage(
tabsetPanel(
tabPanel("Tab #1",
plotOutput("genericPlot")
),
tabPanel("Tab #2",
checkboxInput("showOptions", "Show Options"),
uiOutput("ui_multiview_customize"),
plotOutput("multiview_plot")
)
)
),
server =
function(input, output, session) {
output$genericPlot <- renderPlot(plot(rnorm(1000)))
output$multiview_plot <- renderPlot(plot(runif(1000)))
output$ui_multiview_customize <- renderUI({
if(input$showOptions) {
bsCollapse(
bsCollapsePanel(title = "View Options",
checkboxInput("multiview_checkbox", label = "Include warmup", value = FALSE),
hr(),
tipify(downloadButton("download_multiview", "Save as ggplot2 objects"),
title = "Save ggplot2 object in .RData file.", placement="right")
)
)
}
})
}
)
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
data(Enzyme)
A <- t(enzyme_ADJ)
S1 = as.matrix(enzyme_Csim)
S2 = as.matrix(enzyme_Gsim)
P1 <- nbiNet(A,alpha=0.5, lamda=0.5,  s1=S1, s2=S2,format = "matrix")
perm = list()
set.seed(12345)
for ( i in 1:10){
A <- t(enzyme_ADJ)
A <- A[sample(nrow(A)),sample(ncol(A))]
S1 = as.matrix(enzyme_Csim)
S2 = as.matrix(enzyme_Gsim)
S1 <- S1[sample(nrow(S1)),sample(ncol(S1))]
S2 <- S2[sample(nrow(S2)),sample(ncol(S2))]
R1 <- nbiNet(A,alpha=0.5, lamda=0.5,  s1=S1, s2=S2,format = "matrix")
perm[[i]] <- R1
}
mean_mat <- apply(simplify2array(perm), 1:2, mean)
sd_mat  <-  apply(simplify2array(perm), 1:2, sd)
Z <- (P1 - mean_mat)/sd_mat
sigNetwork <- 2*(pnorm(-abs(Z)))
sigNetwork[1:3,1:5]
sigNetwork[1:5,1:5]
dim(mean_mat)
mean_mat[1:2,1:5]
P1[1:5,1:5]
Z[1:5,1:5]
sd_mat[1:5,1:5]
P1[1:5,1:5]
(0-0)/0
mean_mat <- apply(simplify2array(perm), 1:2, mean)
sd_mat  <-  apply(simplify2array(perm), 1:2, sd)
Z <- (P1 - mean_mat)/sd_mat
Z[is.nan(Z)] = 0
sigNetwork <- 2*(pnorm(-abs(Z)))
sigNetwork[1:10,1:10]
d <- melt(sigNetwork)
head(d)
dd <- melt(sigNetwork)
d <- dd[ order(-dd[,3]), ]
head(d)
dd <- melt(sigNetwork)
d <- dd[ order(dd[,3]), ]
head(d)
head(d,10)
install_github("pauca/rrdkit/rrdkit")
library(devtools)
install_github("pauca/rrdkit/rrdkit")
oo <- melt(A)
head(oo)
PD <- melt(sigNetwork)
P <- PD[ order(PD[,3]), ]
OD <- OD[OD$value == 1,]
OD <- melt(A)
OD <- OD[OD$value == 1,]
dim(OD)
tail(P)
tail(P,30)
dim(P)
P[P$value > 0.05] <- 10
PD <- melt(sigNetwork)
P <- PD[ order(PD[,3]), ]
P[P$value > 0.05] <- 10
P[P$value > 0.05,] <- 10
head(P)
tail(P)
sigNetwork[sigNetwork > 0.05] <- 10
PD <- melt(sigNetwork)
P <- PD[ order(PD[,3]), ]
tail(P)
dim(P)
FPD <- P[P$value!=10,]
dim(FPD)
sigNetwork <- 2*(pnorm(-abs(Z)))
sigNetwork[sigNetwork >= 0.05] <- 10
PD <- melt(sigNetwork)
P <- PD[ order(PD[,3]), ]
FPD <- P[P$value!=10,]
dim(FPD)
tail(FPD)
0.03 < 0.05
dim(OD)
sigNetwork <- 2*(pnorm(-abs(Z)))
sigNetwork[sigNetwork <  0.05] <- 1
sigNetwork[sigNetwork != 1] <- 0
sum(sigNetwork) ## Total number of interactions after computation.
sigNetwork <- 2*(pnorm(-abs(Z)))
PO <- rbind(OD,FPD)
dim(PO)
u <- unique(PO[duplicated(PO),])
dim(u)
head(PO)
u <- PO[duplicated(PO),]
dim(u)
t <- merge(FPD, OD, by.x='Var1', by.y='Var2')
head(t)
head(OD)
dim(FPD)
class(FPD)
class(OD)
head(FPD)
OD <- OD[,1:2]
head(OD)
t <- merge(OD,FPD by.x='Var1', by.y='Var2')
t <- merge(OD,FPD,by.x='Var1', by.y='Var2')
head(t)
colnames(OD) <= c("Drug","target")
t <- merge(OD,FPD,by.x='Var1', by.y='Var2')
head(OD)
colnames(OD) <= c("Drug","target")
colnames(OD) <- c("Drug","target")
head(OD)
t <- merge(OD,FPD,by.x='Var1', by.y='Var2')
t <- merge(OD,FPD,by.x='target', by.y='Var1')
head(t)
head(OD)
t <- merge(OD,FPD,by.x='Drug', by.y='Var2')
head(t)
t <- merge(OD,FPD,by.x='Drug', by.y='Var1')
head(t)
dim(t)
tail(t)
FP <- FP[,1:2]
FP <- FPD[,1:2]
head(FP)
OD <- melt(A)
OD <- OD[OD$value == 1,]
OD <- OD[,1:2]
head(OD)
fun.12 <- function(x.1,x.2,...){
x.1p <- do.call("paste", x.1)
x.2p <- do.call("paste", x.2)
x.1[! x.1p %in% x.2p, ]
}
m <- fun.12(FP,OD)
dim(m)
new <- merge(FPD,m)
dim(new)
head(new)
dim(OD)
dim(FP)
4552+1515
warnings()
tail(new)
old <- merge(m,FPD)
dim(old)
head(new)
old <- merge(OD,FPD)
dim(old)
head(old)
new$outcome <- "Predicted Interactions"
old$outcome <- "True Interactions"
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
install.packages("DT")
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
detach("package:data.table", unload=TRUE)
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
shiny::runApp('github/Shinyapps/netpredicter')
74.41-7.99
7.99+9.99
71.41-17.98
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
shiny::runApp('github/Shinyapps/netpredictor')
library(ShinySRAdb)
library(devtools)
install_github('oliviazz/SRAdb-app')
source("https://bioconductor.org/biocLite.R")
biocLite("SRAdb")
source("https://bioconductor.org/biocLite.R")
biocLite("SRAdb")
library(devtools)
install_github('oliviazz/SRAdb-app')
library(ShinySRAdb)
ShinySRAdb()
library(bipartite)
sampledata <- rbind(
c(1,2,1),
c(1,3,5),
c(2,1,1),
c(2,4,6),
c(3,1,5),
c(3,4,10),
c(4,2,6),
c(4,3,10))
sampledata
betweenness_w(sampledata)
data(small1976)
dim(small1976)
betweenness_w(small1976)
1200 * 400
2000*400
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
devtools::install_github('rstudio/shiny')
remove.packages("shiny", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("shiny", lib.loc="~/Library/R/3.2/library")
library(shiny)
devtools::install_github('rstudio/shiny')
library(shiny)
remove.packages("shiny", lib="~/Library/R/3.2/library")
shiny::runApp('github/DrugBank-Gene-Nexus-master')
shiny::runApp('github/DrugBank-Gene-Nexus-master')
100*(70/6)
100*(70/100)*6
(100*70/100)*6
(100*(70/100))*6
(100*(70/100))/6
(725*(70/100))/6
(30/100)*30
(600*(70/100))/6
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
85+65
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
#### LP&BRIM Algorithm
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
shiny::runApp('github/Shiny_NetPredictor')
View(adjM)
View(adjM)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
cl <- makeCluster(detectCores())
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/github/Shiny_NetPredictor")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
stopCluster(cl)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dim(p)
shiny::runApp()
shiny::runApp()
setwd("~/github/Shiny_NetPredictor")
load("Enzyme.rda")
A <- adjm
S1 = as.matrix(compSim)
S2 = as.matrix(protSim)
g1 = graph.incidence(A)
p <- biNetwalk(g1,s1=S2,s2=S1,normalise = "laplace",dataSeed = NULL,restart = 0.8,verbose = T)
library(netpredictor)
detach("package:netpredictor", unload=TRUE)
library("netpredictor", lib.loc="~/Library/R/3.2/library")
p <- biNetwalk(g1,s1=S2,s2=S1,normalise = "laplace",dataSeed = NULL,restart = 0.8,verbose = T)
detach("package:netpredictor", unload=TRUE)
remove.packages("netpredictor", lib="~/Library/R/3.2/library")
install.packages("~/github/netpredictor_1.0.tar.gz", repos = NULL, type = "source")
p <- biNetwalk(g1,s1=S2,s2=S1,normalise = "laplace",dataSeed = NULL,restart = 0.8,verbose = T)
